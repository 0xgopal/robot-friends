{"version":3,"sources":["robots.js","Card.js","Cardlist.js","Searchbox.js","App.js","serviceWorker.js","index.js"],"names":["robots","id","name","username","email","Card","props","className","src","alt","CardList","cardArray","map","user","i","key","Searchbox","searchfield","searchChange","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredRobots","this","filter","robot","toLowerCase","includes","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"sOAAaA,EAAS,CACpB,CACEC,GAAI,EACJC,KAAM,YACNC,SAAU,MACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,WACNC,SAAU,SACVC,MAAO,qBAET,CACEH,GAAI,EACJC,KAAM,UACNC,SAAU,QACVC,MAAO,wBAET,CACEH,GAAI,EACJC,KAAM,YACNC,SAAU,QACVC,MAAO,yBAET,CACEH,GAAI,EACJC,KAAM,cACNC,SAAU,SACVC,MAAO,mBAET,CACEH,GAAI,EACJC,KAAM,YACNC,SAAU,aACVC,MAAO,sBAET,CACEH,GAAI,EACJC,KAAM,cACNC,SAAU,SACVC,MAAO,2BAET,CACEH,GAAI,EACJC,KAAM,aACNC,SAAU,QACVC,MAAO,mBAET,CACEH,GAAI,EACJC,KAAM,YACNC,SAAU,WACVC,MAAO,uBAET,CACEH,GAAI,GACJC,KAAM,SACNC,SAAU,WACVC,MAAO,qBCjDIC,EATF,SAACC,GACV,OAAO,yBAAKC,UAAY,wDAClB,yBAAKC,IAAG,+BAA2BF,EAAML,GAAjC,YAA+CQ,IAAM,WAC7D,6BACI,4BAAKH,EAAMJ,MACX,+BAAKI,EAAMF,UCSRM,EAbA,SAAC,GAAa,IAAZV,EAAW,EAAXA,OAEZW,EAAYX,EAAOY,KAAI,SAACC,EAAKC,GAEhC,OACE,kBAAC,EAAD,CAAMC,IAAKD,EAAGb,GAAKD,EAAOc,GAAGb,GAAIC,KAAOF,EAAOc,GAAGZ,KAAME,MAAQJ,EAAOc,GAAGV,WAG9E,OAAQ,6BACHO,ICHQK,EAPG,SAAC,GAA+B,EAA9BC,YAA+B,IAAnBC,EAAkB,EAAlBA,aAChC,OACI,yBAAKX,UAAU,OACX,2BAAOA,UAAU,mCAAmCY,KAAK,SAASC,YAAY,kBAAkBC,SAAUH,MC6BnGI,G,8DAvBZ,aAAc,IAAD,8BACX,gBAMFC,eAAiB,SAACC,GAChB,EAAKC,SAAS,CAACR,YAAaO,EAAME,OAAOC,SANzC,EAAKC,MAAO,CACV5B,OAAQA,EACRiB,YAAc,IAJL,E,qDAWJ,IAAD,OACDY,EAAeC,KAAKF,MAAM5B,OAAO+B,QAAO,SAAAC,GAC5C,OAAOA,EAAM9B,KAAK+B,cAAcC,SAAS,EAAKN,MAAMX,YAAYgB,kBAEjE,OAAO,yBAAK1B,UAAU,MACnB,wBAAIA,UAAU,MAAd,eACA,kBAAC,EAAD,CAAWW,aAAeY,KAAKP,iBAC/B,kBAAC,EAAD,CAAUvB,OAAQ6B,S,GAnBRM,IAAMC,YCGJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.ee8af581.chunk.js","sourcesContent":["export const robots = [\n  {\n    id: 1,\n    name: 'Jalajasur',\n    username: 'rog',\n    email: 'disciplined@success.biz'\n  },\n  {\n    id: 2,\n    name: 'Mithnaad',\n    username: 'm1ckey',\n    email: 'sincere@topman.io'\n  },\n  {\n    id: 3,\n    name: 'Anuraad',\n    username: 'banna',\n    email: 'army@khammaGhani.net'\n  },\n  {\n    id: 4,\n    name: 'Manakaran',\n    username: 'gullu',\n    email: 'needagf@sportyguy.him'\n  },\n  {\n    id: 5,\n    name: 'Ayubhusindi',\n    username: 'boobey',\n    email: 'confused@420.im'\n  },\n  {\n    id: 6,\n    name: 'Shanhlaad',\n    username: 'mr.slugger',\n    email: 'whoiam@mistri.info'\n  },\n  {\n    id: 7,\n    name: 'NirmalBaaba',\n    username: 'pamdey',\n    email: 'kripabarsegi@hariom.biz'\n  },\n  {\n    id: 8,\n    name: 'Kumbhkaran',\n    username: 'beast',\n    email: 'hahaha@sleep.me'\n  },\n  {\n    id: 9,\n    name: 'Indrajeet',\n    username: 'meghnaad',\n    email: 'pitashree@shakti.io'\n  },\n  {\n    id: 10,\n    name: 'Raavan',\n    username: 'dashanan',\n    email: 'seete@heyram.biz'\n  }\n];\n","import React from 'react';\r\nconst Card = (props) => {\r\n    return(<div className = 'bg-light-green tc dib br3 pa3 ma2 grow bw-2 shadow-5'>\r\n          <img src ={`https://robohash.org/${props.id}?200x200`} alt = 'robots' />\r\n          <div>\r\n              <h2>{props.name}</h2>\r\n              <p> {props.email}</p>\r\n          </div>\r\n    </div>)\r\n}\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\nconst CardList = ({robots}) =>{\r\n\r\n const cardArray = robots.map((user,i) =>\r\n  {\r\n    return(\r\n      <Card key={i} id ={robots[i].id} name ={robots[i].name} email ={robots[i].email} />\r\n    )\r\n  })\r\n  return (<div>\r\n      {cardArray}\r\n  </div>);\r\n}\r\n\r\n  export default CardList;","import React from 'react';\r\nconst Searchbox = ({searchfield,searchChange}) => {\r\nreturn(\r\n    <div className='pa2'>\r\n        <input className='pa3 ba b--green bg-lightest-blue' type='search' placeholder='search your bot' onChange={searchChange} />\r\n    </div>\r\n);\r\n}\r\nexport default Searchbox;","import React from \"react\";\nimport {robots} from './robots';\nimport CardList from './Cardlist';\nimport Searchbox from './Searchbox';\nimport 'tachyons';\nimport './App.css';\n\n\n\nclass App extends React.Component {\n   constructor(){\n     super();\n     this.state ={\n       robots :robots,\n       searchfield : '',\n     }\n   }\n   onSearchChange = (event) => {\n     this.setState({searchfield :event.target.value})\n     \n   }\n  render() {\n    const filteredRobots=this.state.robots.filter(robot =>{\n      return robot.name.toLowerCase().includes(this.state.searchfield.toLowerCase())\n    })\n     return(<div className='tc'>\n        <h1 className=\"f1\">Robofriends</h1>\n        <Searchbox searchChange ={this.onSearchChange}/>\n        <CardList robots={filteredRobots} />\n       </div>\n  )\n  }\n}\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}